const boardSize = 10;
let board = [];
let ships = [];
let isBotMode = false;
let currentShip = null;

document.getElementById('playVsBot').onclick = () => startGame(true);
document.getElementById('playMultiplayer').onclick = () => startGame(false);

function startGame(botMode) {
    isBotMode = botMode;
    board = Array.from({ length: boardSize }, () => Array(boardSize).fill(null));
    ships = [];
    renderBoard();
    document.getElementById('gameArea').style.display = 'block';
    setupShipPlacement();
}

function setupShipPlacement() {
    const shipElements = document.querySelectorAll('.ship');
    shipElements.forEach(ship => {
        ship.ondragstart = (event) => {
            currentShip = { size: parseInt(ship.dataset.size), element: ship };
        };
    });

    const cells = document.querySelectorAll('.cell');
    cells.forEach(cell => {
        cell.ondragover = (event) => {
            event.preventDefault();
        };
        cell.ondrop = (event) => {
            const cellIndex = Array.from(cells).indexOf(cell);
            const row = Math.floor(cellIndex / boardSize);
            const col = cellIndex % boardSize;
            placeShip(row, col);
        };
    });
}

function renderBoard() {
    const boardDiv = document.getElementById('board');
    boardDiv.innerHTML = '';
    board.forEach((row, r) => {
        row.forEach((cell, c) => {
            const cellDiv = document.createElement('div');
            cellDiv.className = 'cell';
            cellDiv.setAttribute('draggable', true);
            boardDiv.appendChild(cellDiv);
        });
    });
}

function placeShip(row, col) {
    if (currentShip && canPlaceShip(row, col, currentShip.size, true)) {
        for (let i = 0; i < currentShip.size; i++) {
            board[row][col + i] = 'ship';
        }
        ships.push({ size: currentShip.size, start: { row, col }, orientation: 'horizontal' });
        renderBoard();
        currentShip.element.remove();
        currentShip = null;
    } else {
        alert("Não é possível posicionar o navio aqui!");
    }
}

function canPlaceShip(row, col, size, orientation) {
    if (orientation) { // Horizontal
        if (col + size > boardSize) return false; // Excede o limite do tabuleiro
        for (let i = 0; i < size; i++) {
            if (board[row][col + i]) return false; // Espaço já ocupado
        }
    }
    return true;
}

// Continue com a lógica do jogo (ataques, verificação de vitória etc.)
